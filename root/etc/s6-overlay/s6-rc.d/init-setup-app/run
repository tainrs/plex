#!/command/with-contenv bash
# shellcheck shell=bash

# Description:
# This script is executed by the s6 supervisor when the container starts.
# It sets the file creation mask to the value of UMASK, which determines the default permissions for newly created files.
# It also displays the application banner and environment variables with some masked for security.
# It configures the Plex Media Server application based on environment variables and hardware support.
# It also purges the codecs folder if the PLEX_PURGE_CODECS environment variable is set to "true".
# It sets the transcoder directory if it is not already set.
# It removes any existing PID file to avoid conflicts.

# Set the file creation mask to the value of UMASK, which determines the default permissions for newly created files.
umask "${UMASK}"

# Function to mask sensitive information by replacing characters with asterisks, leaving the last few characters visible.
mask() {
    local n=3
    # If the length of the input string is less than or equal to 5, adjust the number of visible characters accordingly.
    [[ ${#1} -le 5 ]] && n=$(( ${#1} - 3 ))
    local a="${1:0:${#1}-n}"
    local b="${1:${#1}-n}"
    printf "%s%s\n" "${a//?/*}" "$b"
}

# Display application banner and environment variables with some masked for security.
echo "
$(figlet -d /usr/share/figlet -f Cyberlarge.flf "plex")
----------------------------------------------------------------------
ENVIRONMENT APP
----------------------------------------------------------------------
WEBUI_PORTS=${WEBUI_PORTS}
PLEX_CLAIM_TOKEN=$(mask "${PLEX_CLAIM_TOKEN}")
PLEX_ADVERTISE_URL=${PLEX_ADVERTISE_URL}
PLEX_NO_AUTH_NETWORKS=${PLEX_NO_AUTH_NETWORKS}
PLEX_PURGE_CODECS=${PLEX_PURGE_CODECS}
----------------------------------------------------------------------
"

# Apply full read/write/execute permissions to /transcode directory.
echo "Applying permissions to /transcode"
chmod "=rwx" "/transcode"
find "/transcode" -maxdepth 0 \( ! -user tainrs -or ! -group tainrs \) -exec chown tainrs:tainrs {} +

############
## Functions
############

# Function to retrieve a preference value from the Preferences.xml file.
getPref() {
    local key="$1"
    xmlstarlet sel -T -t -m "/Preferences" -v "@${key}" -n "${prefFile}"
}

# Function to set or update a preference value in the Preferences.xml file.
setPref() {
    local key="$1"
    local value="$2"
    count="$(xmlstarlet sel -t -v "count(/Preferences/@${key})" "${prefFile}")"
    count=$((count + 0))
    if [[ $count -gt 0 ]]; then
        xmlstarlet ed --inplace --update "/Preferences/@${key}" -v "${value}" "${prefFile}"
    else
        xmlstarlet ed --inplace --insert "/Preferences"  --type attr -n "${key}" -v "${value}" "${prefFile}"
    fi
}

#################
## Configure Plex
#################

prefFile="${CONFIG_DIR}/Preferences.xml"

# Create an empty Preferences.xml file if it doesn't already exist.
if [[ ! -f "${prefFile}" ]]; then
    echo "Creating empty Preferences.xml..."
    cat > "${prefFile}" <<-EOF
<?xml version="1.0" encoding="utf-8"?>
<Preferences/>
EOF
    find "${prefFile}" -maxdepth 0 \( ! -user tainrs -or ! -group tainrs \) -exec chown tainrs:tainrs {} +
fi

# Setup Server's client identifier.
serial="$(getPref "MachineIdentifier")"
if [[ -z "${serial}" ]]; then
    serial="$(cat /proc/sys/kernel/random/uuid)"
    setPref "MachineIdentifier" "${serial}"
fi
clientId="$(getPref "ProcessedMachineIdentifier")"
if [[ -z "${clientId}" ]]; then
    clientId="$(echo -n "${serial}- Plex Media Server" | sha1sum | cut -b 1-40)"
    setPref "ProcessedMachineIdentifier" "${clientId}"
fi

# Obtain and set the server token using the claim token, if available.
token="$(getPref "PlexOnlineToken")"
if [[ -n "${PLEX_CLAIM_TOKEN}" ]] && [[ -z "${token}" ]]; then
    echo "Attempting to obtain server token from claim token..."
    loginInfo="$(curl -fsSL -X POST \
        -H 'X-Plex-Client-Identifier: '"${clientId}" \
        -H 'X-Plex-Product: Plex Media Server'\
        -H 'X-Plex-Version: 1.1' \
        -H 'X-Plex-Provides: server' \
        -H 'X-Plex-Platform: Linux' \
        -H 'X-Plex-Platform-Version: 1.0' \
        -H 'X-Plex-Device-Name: PlexMediaServer' \
        -H 'X-Plex-Device: Linux' \
        "https://plex.tv/api/claim/exchange?token=${PLEX_CLAIM_TOKEN}")"
    token="$(echo "$loginInfo" | sed -n 's/.*<authentication-token>\(.*\)<\/authentication-token>.*/\1/p')"

    if [[ "$token" ]]; then
        echo "Token obtained successfully!"
        setPref "PlexOnlineToken" "${token}"
    fi
fi

# Set other preferences based on environment variables, if provided.
[[ -n "${ADVERTISE_IP}" ]] && PLEX_ADVERTISE_URL=${ADVERTISE_IP}
if [[ -n "${PLEX_ADVERTISE_URL}" ]]; then
    echo "Setting customConnections to: ${PLEX_ADVERTISE_URL}"
    setPref "customConnections" "${PLEX_ADVERTISE_URL}"
fi

[[ -n "${ALLOWED_NETWORKS}" ]] && PLEX_NO_AUTH_NETWORKS=${ALLOWED_NETWORKS}
if [[ -n "${PLEX_NO_AUTH_NETWORKS}" ]]; then
    echo "Setting allowedNetworks to: ${PLEX_NO_AUTH_NETWORKS}"
    setPref "allowedNetworks" "${PLEX_NO_AUTH_NETWORKS}"
fi

# Set the transcoder directory if it is not already set.
if [[ -z "$(getPref "TranscoderTempDirectory")" ]]; then
    echo "Setting TranscoderTempDirectory to: /transcode"
    setPref "TranscoderTempDirectory" "/transcode"
fi

# Remove any existing PID file to avoid conflicts.
rm -f "${CONFIG_DIR}/plexmediaserver.pid"

#############
## HW Support
#############

# Find and configure hardware devices for transcoding.
DEVICES=$(find /dev/dri /dev/dvb -type c -print 2>/dev/null)

for i in ${DEVICES}; do
    # Get the group ID and name for the current device.
    DEVICE_GROUP_ID=$(stat -c '%g' "$i")
    DEVICE_GROUP_NAME=$(getent group "${DEVICE_GROUP_ID}" | awk -F: '{print $1}')

    # Create a group for the device if it doesn't exist, then add the user 'tainrs' to it.
    if [[ -z "${DEVICE_GROUP_NAME}" ]]; then
        DEVICE_GROUP_NAME="video${RANDOM}"
        groupadd -g "${DEVICE_GROUP_ID}" "${DEVICE_GROUP_NAME}"
    fi
    getent group "${DEVICE_GROUP_NAME}" | grep -q tainrs || usermod -a -G "${DEVICE_GROUP_NAME}" tainrs
done

######################
## Purge Codecs folder
######################

# Purge the codecs folder if the PLEX_PURGE_CODECS environment variable is set to "true".
if [[ "${PLEX_PURGE_CODECS}" == "true" ]]; then
    echo "Purging Codecs folder..."
    find "${CONFIG_DIR}/Codecs" -mindepth 1 -not -name '.device-id' -print -delete
fi
